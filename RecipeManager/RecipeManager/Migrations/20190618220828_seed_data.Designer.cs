// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeManager.Data;

namespace RecipeManager.Migrations
{
    [DbContext(typeof(RecipeDbContext))]
    [Migration("20190618220828_seed_data")]
    partial class seed_data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RecipeManager.Models.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Details");

                    b.Property<int>("RecipeID");

                    b.HasKey("ID");

                    b.HasIndex("RecipeID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RecipeManager.Models.Ingredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("Quantity");

                    b.Property<int>("RecipeID");

                    b.HasKey("ID");

                    b.HasIndex("RecipeID");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new { ID = 1, Name = "Oyster Crackers", Quantity = "Two bags or 2 lbs", RecipeID = 1 },
                        new { ID = 2, Name = "Tony Chachere's", Notes = "A louisianan seasoning", Quantity = "1 tbsp", RecipeID = 1 },
                        new { ID = 3, Name = "Lemon Pepper", Quantity = "1 tsp", RecipeID = 1 },
                        new { ID = 4, Name = "Dill", Notes = "dried works best", Quantity = "3 tbsp", RecipeID = 1 },
                        new { ID = 5, Name = "Ranch Dressing Packet", Notes = "I like hidden valley", Quantity = "1", RecipeID = 1 },
                        new { ID = 6, Name = "Uncooked Sushi Rice", Quantity = "2 cups", RecipeID = 2 },
                        new { ID = 7, Name = "Salted Salmon", Quantity = "4 oz", RecipeID = 2 },
                        new { ID = 8, Name = "Pickled Plums / Umeboshi", Quantity = "2 - 3 depending on how much you like pickled plum", RecipeID = 2 },
                        new { ID = 9, Name = "Seaweed", Quantity = "4 sheets, cut in half", RecipeID = 2 },
                        new { ID = 10, Name = "Your favorite Ice Cream", Quantity = "1 pint or 6 scoops", RecipeID = 3 },
                        new { ID = 11, Name = "Chocolate Fudge Sauce", Notes = "Heated slightly", Quantity = "1/2 cup", RecipeID = 3 },
                        new { ID = 12, Name = "Sprinkles", Quantity = "To Taste", RecipeID = 3 },
                        new { ID = 13, Name = "Marichino Cherry", Quantity = "2", RecipeID = 3 },
                        new { ID = 14, Name = "Whole, roasted, broken down chicken", Quantity = "One", RecipeID = 4 },
                        new { ID = 15, Name = "Flour", Quantity = "1/2 cup", RecipeID = 4 },
                        new { ID = 16, Name = "Oil or Butter, or other fat", Notes = "I prefer butter", Quantity = "1/2 cup", RecipeID = 4 },
                        new { ID = 17, Name = "Onion", Quantity = "1 large", RecipeID = 4 },
                        new { ID = 18, Name = "Chicken stock", Notes = "Home made is better", Quantity = "6 qts", RecipeID = 4 },
                        new { ID = 19, Name = "Butter", Quantity = "1/2 cup", RecipeID = 5 },
                        new { ID = 20, Name = "Fresh Thyme", Quantity = "4-6 sprigs", RecipeID = 5 },
                        new { ID = 23, Name = "Whole, raw chicken", Quantity = "One", RecipeID = 5 },
                        new { ID = 21, Name = "White Wine", Notes = "Optional", Quantity = "1 cup", RecipeID = 5 },
                        new { ID = 22, Name = "Vegitable Oil", Quantity = "1/2 cup", RecipeID = 1 }
                    );
                });

            modelBuilder.Entity("RecipeManager.Models.Instruction", b =>
                {
                    b.Property<int>("RecipeID");

                    b.Property<int>("StepNumber");

                    b.Property<string>("Detail");

                    b.HasKey("RecipeID", "StepNumber");

                    b.ToTable("Instructions");

                    b.HasData(
                        new { RecipeID = 1, StepNumber = 1, Detail = "Preheat oven to 325 degrees" },
                        new { RecipeID = 1, StepNumber = 2, Detail = "Mix together Ranch, Lemon Pepper, Tony Chachere's, and Dill" },
                        new { RecipeID = 1, StepNumber = 3, Detail = "Pour crackers into 9 X 13 pan. Mix crackers and oil" },
                        new { RecipeID = 1, StepNumber = 4, Detail = "Add seasoning to oiled crackers. Mix well" },
                        new { RecipeID = 1, StepNumber = 5, Detail = "Bake for 15 minutes, stirring frequently. Let cool before eating" },
                        new { RecipeID = 2, StepNumber = 1, Detail = "Cook rice according to manufacturer instructions, or in a rice cooker. While rice is cooking, bake salted salmon at 350 degrees for 15 minutes or until done." },
                        new { RecipeID = 2, StepNumber = 2, Detail = "When rice is done cooking, remove from pot and transfer onto a baking sheet. Fan with a peice of cardboard until rice is cool enough to touch. (But don't let it get cold.) While rice and fish are cooling, prepare a small bowl of salt and a bowl of water." },
                        new { RecipeID = 2, StepNumber = 3, Detail = "Dip hands in water, then coat in salt. Pick up a handful of rice slightly larger than a golf ball. (Note: Size isn't super important. If you want a larger rice ball, add more rice). Gently press rice flat into your hand, making a slight indent in the center of the rice. Add your filling (salmon or umeboshi). Add a golf ball sized peice of rice on top of filling and pack into a triangle shape" },
                        new { RecipeID = 2, StepNumber = 4, Detail = "When ready to eat, wrap rice ball in seaweed and enjoy." },
                        new { RecipeID = 3, StepNumber = 1, Detail = "Scoop IceCream into two bowls, three scoops each." },
                        new { RecipeID = 3, StepNumber = 2, Detail = "Pour chocolate sauce over ice cream. Sprinkle on the sprinkles." },
                        new { RecipeID = 3, StepNumber = 3, Detail = "Add a cherry on top and enjoy!" },
                        new { RecipeID = 4, StepNumber = 1, Detail = "In a large, thick bottomed pot, add butter and flour. Stir constantly over medium heat until flour becomes a dark golden brown. Add chopped onions. Cook until onions are tender." },
                        new { RecipeID = 4, StepNumber = 2, Detail = "Once onions are cooked, add in 1/2 cup of chicken stock. Stir until there are no lumps. Gradually add the rest of the chicken stock. Bring to a boil and allow to cook until all flavors have mingled (20 minutes)" },
                        new { RecipeID = 4, StepNumber = 3, Detail = "Add chicken, and salt to taste. Serve over rice with Gumbo File" },
                        new { RecipeID = 5, StepNumber = 1, Detail = "Prehead oven to 350. In a small pan, add butter and thyme leaves. Remove from heat once butter is completely melted, and allow to cool slightly" },
                        new { RecipeID = 5, StepNumber = 2, Detail = "Once butter is cool enough to touch, carefully coat chicken in the thyme butter. If possible, get the butter under the skin as well. Reserve leftover butter." },
                        new { RecipeID = 5, StepNumber = 3, Detail = "Pour wine into a 2 and a half to three inch wide glass jar. Place the glass jar in a deep lipped baking sheet or pirex baking dish. Carefully slide the chicken onto the glass jar." },
                        new { RecipeID = 5, StepNumber = 4, Detail = "Bake chicken for 30 minutes for each pound. Add more butter to chicken halfway through baking. Allow to rest before cutting." }
                    );
                });

            modelBuilder.Entity("RecipeManager.Models.Recipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<string>("CookTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsSaved");

                    b.Property<string>("Notes");

                    b.Property<int>("ServingSize");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Recipes");

                    b.HasData(
                        new { ID = 1, Author = "Clarice", Description = "Tasty, tangy crackers", IsSaved = false, Notes = "Good for parties", ServingSize = 20, Title = "Welcome Wafers" },
                        new { ID = 2, Author = "Clarice", Description = "Rice balls with a variety of toppings", IsSaved = false, ServingSize = 8, Title = "Rice Balls" },
                        new { ID = 3, Author = "Clarice", Description = "It's a Ice Cream Sunday, it doesn't need a description", IsSaved = false, ServingSize = 2, Title = "Ice Cream Sunday" },
                        new { ID = 4, Author = "Clarice", Description = "Traditional Rice and Broth dish from Louisiana", IsSaved = false, Notes = "Grandma's recipe", ServingSize = 8, Title = "Chicken Gumbo" },
                        new { ID = 5, Author = "Clarice", Description = "Perfectly cooked chicken with a crispy skin", IsSaved = false, Notes = "Be wary of cook time. It can depend on the oven, or the size of the chicken.", ServingSize = 4, Title = "Thyme Roasted Chicken" }
                    );
                });

            modelBuilder.Entity("RecipeManager.Models.SavedRecipe", b =>
                {
                    b.Property<int>("RecipeID");

                    b.Property<string>("User");

                    b.HasKey("RecipeID", "User");

                    b.ToTable("SavedRecipes");
                });

            modelBuilder.Entity("RecipeManager.Models.Comment", b =>
                {
                    b.HasOne("RecipeManager.Models.Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RecipeManager.Models.Ingredient", b =>
                {
                    b.HasOne("RecipeManager.Models.Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RecipeManager.Models.Instruction", b =>
                {
                    b.HasOne("RecipeManager.Models.Recipe")
                        .WithMany("Instructions")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
